#include <iostream>
#include "phaser.h"

struct Arg : public option::Arg
{
    static void printError(const char *msg1, const option::Option &opt, const char *msg2)
    {
        std::cerr << "SpecHap: " << msg1 << opt.desc->longopt << msg2 << std::endl;
    }

    static option::ArgStatus Unknown(const option::Option &option, bool msg)
    {
        if (msg) printError("Unknown option '", option, "'\n");
        return option::ARG_ILLEGAL;
    }

    static option::ArgStatus Required(const option::Option &option, bool msg)
    {
        if (option.arg != nullptr)
            return option::ARG_OK;

        if (msg) printError("Option '", option, "' requires an argument\n");
        return option::ARG_ILLEGAL;
    }

    static option::ArgStatus Numeric(const option::Option &option, bool msg)
    {
        char *endptr = nullptr;
        if (option.arg != nullptr && strtol(option.arg, &endptr, 10))
            ;
        if (endptr != option.arg && *endptr == 0)
            return option::ARG_OK;
        return option::ARG_IGNORE;
    }
};



const option::Descriptor usage[] =
        {
                {UNKNOWN,     0, "",  "",            Arg::Unknown,  "Usage: "},
                {HELP,        0, "h", "help",        Arg::None,     "\t--help\tPrint this message and exit."},
                {VCF,         0, "v", "vcf",         Arg::Required, "\t-v <arg>,\t--vcf=<arg>\tSorted Heterozygous VCF File."},
                {FRAGMENT,    0, "f", "frag",        Arg::Required, "\t-f <arg>,\t--frag=<arg>\tFragment File Generated by ExtractHairs, sort by SNP position is required."},
                {STATS,       0, "s", "frag_stat",   Arg::Required,  "\t-s <arg>,\t--frag_stat=<arg>\tFragment file statistic, in bed format, required for 10x."},
                {OUT,         0, "o", "out",         Arg::Required, "\t-o <arg>,\t--out=<arg>\tOutput VCF File."},
                {TENX,        0, "T", "tenx",        Arg::None,     "\t-T,\t--tenx\tSpecified for 10X data."},
                {HIC,         0, "H", "hic",         Arg::None,     "\t-H,\t--hic\tSpecified for HiC data."},
                {PACBIO,         0, "P", "pacbio",         Arg::None,     "\t-P,\t--pacbio\tSpecified for Pacbio data."},
                {NANOPORE,         0, "N", "nanopore",         Arg::None,     "\t-N,\t--nanopore\tSpecified for Nanopore data."},
                {WINDOW_SIZE, 0, "w", "window_size", Arg::Numeric,  "\t-w [<arg>],\t--window_size [<arg>]\tPhasing Window Size, default=250."},
                {WINDOW_OVERLAP, 0, "O", "window_overlap", Arg::Numeric,  "\t-O [<arg>],\t--window_overlap [<arg>]\tOverlap length between consecutive phasing window, default=60."},
                {NEWFORMAT, 0, "", "new_format",      Arg::None,     "\t--new_format\tSpecified when using new_format with extractHair"},
                {KEEP_PHASING_INFO, 0, "", "keep_phasing_info", Arg::None, "\t--keep_phasing_info\tSpecified when trying to keep previous phasing info"},
                {0,           0,   0,          0,               0,   0 }
        };

//TODO: messegign system
int main(int argc, char *argv[])
{
    argc -= (argc > 0);argv += (argc > 0);
    option::Stats stats(usage, argc, argv);
    std::vector<option::Option> options(stats.options_max);
    std::vector<option::Option> buffer(stats.buffer_max);
    option::Parser parse(usage, argc, argv, &options[0], &buffer[0]);

    if (parse.error())
        exit(1);

    if (options[HELP] || argc == 0)
    {
        int columns = getenv("COLUMNS") ? atoi(getenv("COLUMNS")) : 80;
        option::printUsage(std::cout, usage);
        exit(1);
    }
    if (options[VCF].arg == nullptr)
    {
        std::cerr << "SpecHap: Error. Missing VCF file, check the usage of specHap.\n";
        option::printUsage(std::cout, usage);
        exit(1);
    }
    if (options[FRAGMENT].arg == nullptr)
    {
        std::cerr << "SpecHap: Error. Missing Fragment file, check the usage of specHap.\n";
        option::printUsage(std::cout, usage);
        exit(1);
    }
    if (options[OUT].arg == nullptr)
    {
        std::cerr << "SpecHap: Error. Missing output file name, check the usage of specHap.\n";
        option::printUsage(std::cout, usage);
        exit(1);
    }
    if (options[TENX] && options[HIC])
    {
        std::cerr << "SpecHap: Error. Operation mode 10X and HiC are specified at the same time.\n";
        exit(1);
    }
    if (options[TENX] && options[STATS].arg == nullptr)
    {
        std::cerr << "SpecHap: Error, require bed formatted fragment status file in 10X mode.\n";
        exit(1);
    }


    Phaser *phaser = new Phaser(options);
    phaser->phasing();
    delete phaser;
    return 0;
}